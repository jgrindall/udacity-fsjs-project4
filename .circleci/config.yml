# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.7

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - node/test:
          # This is the node version to use for the `cimg/node` tag
          # Relevant tags can be found on the CircleCI Developer Hub
          # https://circleci.com/developer/images/image/cimg/node
          version: '16.10'
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm



---------





    aws cp --recursive --acl public-read ./build s3://udagram-test01/
Inside package.json make a script to call the deploy.sh file:
"deploy":  "chmod +x ./bin/deploy.sh && ./bin/deploy.sh"









-------------







version: 2.1
orbs:
    node: circleci/node@4.1.0
    aws-cli: circleci/aws-cli@1.3.1
jobs:
    build:
        docker:
            - image: "cimg/base:stable"
        steps:
            - node/install
            - checkout
            - run:
                  name: Front-End Install
                  command: |
                      npm run frontend:install
            - run:
                  name: Back-End Install
                  command: |
                      npm run backend:install
            - run:
                  name: Front-End Build
                  command: |
                      npm run frontend:build
            - run:
                  name: Back-End Build
                  command: |
                      npm run backend:build





----------




version: 2.1
orbs:
    # orgs contain basc recipes and reproducible actions (install node, aws, etc.)
    node: circleci/node@4.1.0
    # different jobs are calles later in the workflows sections
jobs:
    build:
        docker:
            # the base image can run most needed actions with orbs
            - image: "cimg/base:stable"
        steps:
            - node/install
            - checkout
            # install dependencies in both apps
            - run:
                  name: hello
                  command: |
                      echo "hello-world"



--------



Once this is done, we need to make sure our AWS credentials are properly saved in CircleCI. Here are the steps to do so:

    Navigate to the CircleCI dashboard.
    Go to the "project details" page of the project you are using.
    Click on "project details" and navigate to "environment variables".
    Add values for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. You can also add a value for AWS_DEFAULT_REGION. This should normally reflect the region where you have started your services.
    Refer back to the "To create access keys for an IAM user" on this link if you don't remember how to create your access key.





    ----------


"scripts": {
    "frontend:install": "cd reactnd-contacts-complete && npm install",
    "backend:install": "cd reactnd-contacts-server && npm install",
    "frontend:build": "cd reactnd-contacts-complete && npm run build",
    "backend:build": "cd reactnd-contacts-server && npm run build"
}



------------------


    version: 2.1
    orbs:
        node: circleci/node@4.1.0
        aws-cli: circleci/aws-cli@1.3.1
    jobs:
        build:
            docker:
                -   image: "cimg/base:stable"
            steps:
                - node/install
                - checkout
                -   run:
                        name: Front-End Install
                        command: |
                            npm run frontend:install
                -   run:
                        name: Back-End Install
                        command: |
                            npm run backend:install
                -   run:
                        name: Front-End Build
                        command: |
                            npm run frontend:build
                -   run:
                        name: Back-End Build
                        command: |
                            npm run backend:build













                            ---------







                            We will need to edit the reactnd-contacts-complete/bin/deploy.sh script and add the name of our previously used S3 bucket.

                            aws s3 cp --recursive --acl public-read ./build s3://092384029384random/



                            -------


                            "scripts": {
                               "start": "react-scripts start",
                               "build": "react-scripts build",
                               "deploy": "chmod +x bin/deploy.sh && bin/deploy.sh"
                             }

"scripts": {
    "frontend:install": "cd reactnd-contacts-complete && npm install",
    "backend:install": "cd reactnd-contacts-server && npm install",
    "frontend:build": "cd reactnd-contacts-complete && npm run build",
    "backend:build": "cd reactnd-contacts-server && npm run build",
    "frontend:deploy": "cd reactnd-contacts-complete && npm run deploy"
}




                            -----------








version: 2.1
orbs:
    node: circleci/node@4.1.0
    aws-cli: circleci/aws-cli@1.3.1
jobs:
    build:
        docker:
            - image: "cimg/base:stable"
        steps:
            - node/install
            - checkout
            - aws-cli/setup
            - run:
                  name: Front-End Install
                  command: |
                      npm run frontend:install
            - run:
                  name: Back-End Install
                  command: |
                      npm run backend:install
            - run:
                  name: Front-End Build
                  command: |
                      npm run frontend:build
            - run:
                  name: Back-End Build
                  command: |
                      npm run backend:build
            - run:
                  name: Deploy App
                  command: |
                      npm run frontend:deploy









============
